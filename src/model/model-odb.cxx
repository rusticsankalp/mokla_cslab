// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "model-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // Language
  //

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  persist_statement_name[] = "persist_mokla_model_Language";

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  find_statement_name[] = "find_mokla_model_Language";

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  update_statement_name[] = "update_mokla_model_Language";

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  erase_statement_name[] = "erase_mokla_model_Language";

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  query_statement_name[] = "query_mokla_model_Language";

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  erase_query_statement_name[] = "erase_query_mokla_model_Language";

  const unsigned int access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::bool_oid,
    pgsql::int4_oid
  };

  const unsigned int access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::bool_oid,
    pgsql::int4_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::mokla::model::Language, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::mokla::model::Language, id_pgsql >::id_type
  access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::mokla::model::Language, id_pgsql >::id_type
  access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // name_
    //
    if (t[1UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // is_archived_
    //
    t[2UL] = 0;

    // language_code_
    //
    t[3UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // name_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.name_value.data_ptr ();
    b[n].capacity = i.name_value.capacity ();
    b[n].size = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;

    // is_archived_
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.is_archived_value;
    b[n].is_null = &i.is_archived_null;
    n++;

    // language_code_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.language_code_value;
    b[n].is_null = &i.language_code_null;
    n++;
  }

  void access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // name_
    //
    {
      ::std::string const& v =
        o.name_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = size;
      grew = grew || (cap != i.name_value.capacity ());
    }

    // is_archived_
    //
    {
      bool const& v =
        o.is_archived_;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.is_archived_value, is_null, v);
      i.is_archived_null = is_null;
    }

    // language_code_
    //
    {
      ::mokla::model::ELanguage_code const& v =
        o.language_code_;

      bool is_null (false);
      pgsql::value_traits<
          ::mokla::model::ELanguage_code,
          pgsql::id_integer >::set_image (
        i.language_code_value, is_null, v);
      i.language_code_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long long int& v =
        o.id_;

      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // name_
    //
    {
      ::std::string& v =
        o.name_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // is_archived_
    //
    {
      bool& v =
        o.is_archived_;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.is_archived_value,
        i.is_archived_null);
    }

    // language_code_
    //
    {
      ::mokla::model::ELanguage_code& v =
        o.language_code_;

      pgsql::value_traits<
          ::mokla::model::ELanguage_code,
          pgsql::id_integer >::set_value (
        v,
        i.language_code_value,
        i.language_code_null);
    }
  }

  void access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::persist_statement[] =
  "INSERT INTO \"Language\" "
  "(\"id\", "
  "\"name\", "
  "\"is_archived\", "
  "\"language_code\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::find_statement[] =
  "SELECT "
  "\"Language\".\"id\", "
  "\"Language\".\"name\", "
  "\"Language\".\"is_archived\", "
  "\"Language\".\"language_code\" "
  "FROM \"Language\" "
  "WHERE \"Language\".\"id\"=$1";

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::update_statement[] =
  "UPDATE \"Language\" "
  "SET "
  "\"name\"=$1, "
  "\"is_archived\"=$2, "
  "\"language_code\"=$3 "
  "WHERE \"id\"=$4";

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::erase_statement[] =
  "DELETE FROM \"Language\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::query_statement[] =
  "SELECT "
  "\"Language\".\"id\", "
  "\"Language\".\"name\", "
  "\"Language\".\"is_archived\", "
  "\"Language\".\"language_code\" "
  "FROM \"Language\"";

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"Language\"";

  const char access::object_traits_impl< ::mokla::model::Language, id_pgsql >::table_name[] =
  "\"Language\"";

  void access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::mokla::model::Language, id_pgsql >::pointer_type
  access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::mokla::model::Language, id_pgsql >::object_type >
  access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  query (database& db, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::mokla::model::Language, id_pgsql >::
  erase_query (database& db, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // Problem
  //

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  persist_statement_name[] = "persist_mokla_model_Problem";

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  find_statement_name[] = "find_mokla_model_Problem";

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  update_statement_name[] = "update_mokla_model_Problem";

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  erase_statement_name[] = "erase_mokla_model_Problem";

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  query_statement_name[] = "query_mokla_model_Problem";

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  erase_query_statement_name[] = "erase_query_mokla_model_Problem";

  const unsigned int access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::id_type
  access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::id_type
  access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // title_
    //
    if (t[1UL])
    {
      i.title_value.capacity (i.title_size);
      grew = true;
    }

    // difficulty_
    //
    t[2UL] = 0;

    // problem_statement_
    //
    if (t[3UL])
    {
      i.problem_statement_value.capacity (i.problem_statement_size);
      grew = true;
    }

    // problem_statement_type_
    //
    t[4UL] = 0;

    // tests_type_
    //
    t[5UL] = 0;

    // tests_version_
    //
    if (t[6UL])
    {
      i.tests_version_value.capacity (i.tests_version_size);
      grew = true;
    }

    // compact_tests_
    //
    if (t[7UL])
    {
      i.compact_tests_value.capacity (i.compact_tests_size);
      grew = true;
    }

    // complete_tests_
    //
    if (t[8UL])
    {
      i.complete_tests_value.capacity (i.complete_tests_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // title_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.title_value.data_ptr ();
    b[n].capacity = i.title_value.capacity ();
    b[n].size = &i.title_size;
    b[n].is_null = &i.title_null;
    n++;

    // difficulty_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.difficulty_value;
    b[n].is_null = &i.difficulty_null;
    n++;

    // problem_statement_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.problem_statement_value.data_ptr ();
    b[n].capacity = i.problem_statement_value.capacity ();
    b[n].size = &i.problem_statement_size;
    b[n].is_null = &i.problem_statement_null;
    n++;

    // problem_statement_type_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.problem_statement_type_value;
    b[n].is_null = &i.problem_statement_type_null;
    n++;

    // tests_type_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.tests_type_value;
    b[n].is_null = &i.tests_type_null;
    n++;

    // tests_version_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.tests_version_value.data_ptr ();
    b[n].capacity = i.tests_version_value.capacity ();
    b[n].size = &i.tests_version_size;
    b[n].is_null = &i.tests_version_null;
    n++;

    // compact_tests_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.compact_tests_value.data_ptr ();
    b[n].capacity = i.compact_tests_value.capacity ();
    b[n].size = &i.compact_tests_size;
    b[n].is_null = &i.compact_tests_null;
    n++;

    // complete_tests_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.complete_tests_value.data_ptr ();
    b[n].capacity = i.complete_tests_value.capacity ();
    b[n].size = &i.complete_tests_size;
    b[n].is_null = &i.complete_tests_null;
    n++;
  }

  void access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // title_
    //
    {
      ::std::string const& v =
        o.title_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.title_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.title_value,
        size,
        is_null,
        v);
      i.title_null = is_null;
      i.title_size = size;
      grew = grew || (cap != i.title_value.capacity ());
    }

    // difficulty_
    //
    {
      ::mokla::model::EDifficulty const& v =
        o.difficulty_;

      bool is_null (false);
      pgsql::value_traits<
          ::mokla::model::EDifficulty,
          pgsql::id_integer >::set_image (
        i.difficulty_value, is_null, v);
      i.difficulty_null = is_null;
    }

    // problem_statement_
    //
    {
      ::std::string const& v =
        o.problem_statement_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.problem_statement_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.problem_statement_value,
        size,
        is_null,
        v);
      i.problem_statement_null = is_null;
      i.problem_statement_size = size;
      grew = grew || (cap != i.problem_statement_value.capacity ());
    }

    // problem_statement_type_
    //
    {
      ::mokla::model::EProblemStatementType const& v =
        o.problem_statement_type_;

      bool is_null (false);
      pgsql::value_traits<
          ::mokla::model::EProblemStatementType,
          pgsql::id_integer >::set_image (
        i.problem_statement_type_value, is_null, v);
      i.problem_statement_type_null = is_null;
    }

    // tests_type_
    //
    {
      ::mokla::model::ETestsType const& v =
        o.tests_type_;

      bool is_null (false);
      pgsql::value_traits<
          ::mokla::model::ETestsType,
          pgsql::id_integer >::set_image (
        i.tests_type_value, is_null, v);
      i.tests_type_null = is_null;
    }

    // tests_version_
    //
    {
      ::std::string const& v =
        o.tests_version_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.tests_version_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.tests_version_value,
        size,
        is_null,
        v);
      i.tests_version_null = is_null;
      i.tests_version_size = size;
      grew = grew || (cap != i.tests_version_value.capacity ());
    }

    // compact_tests_
    //
    {
      ::std::string const& v =
        o.compact_tests_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.compact_tests_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.compact_tests_value,
        size,
        is_null,
        v);
      i.compact_tests_null = is_null;
      i.compact_tests_size = size;
      grew = grew || (cap != i.compact_tests_value.capacity ());
    }

    // complete_tests_
    //
    {
      ::std::string const& v =
        o.complete_tests_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.complete_tests_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.complete_tests_value,
        size,
        is_null,
        v);
      i.complete_tests_null = is_null;
      i.complete_tests_size = size;
      grew = grew || (cap != i.complete_tests_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long long int& v =
        o.id_;

      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // title_
    //
    {
      ::std::string& v =
        o.title_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.title_value,
        i.title_size,
        i.title_null);
    }

    // difficulty_
    //
    {
      ::mokla::model::EDifficulty& v =
        o.difficulty_;

      pgsql::value_traits<
          ::mokla::model::EDifficulty,
          pgsql::id_integer >::set_value (
        v,
        i.difficulty_value,
        i.difficulty_null);
    }

    // problem_statement_
    //
    {
      ::std::string& v =
        o.problem_statement_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.problem_statement_value,
        i.problem_statement_size,
        i.problem_statement_null);
    }

    // problem_statement_type_
    //
    {
      ::mokla::model::EProblemStatementType& v =
        o.problem_statement_type_;

      pgsql::value_traits<
          ::mokla::model::EProblemStatementType,
          pgsql::id_integer >::set_value (
        v,
        i.problem_statement_type_value,
        i.problem_statement_type_null);
    }

    // tests_type_
    //
    {
      ::mokla::model::ETestsType& v =
        o.tests_type_;

      pgsql::value_traits<
          ::mokla::model::ETestsType,
          pgsql::id_integer >::set_value (
        v,
        i.tests_type_value,
        i.tests_type_null);
    }

    // tests_version_
    //
    {
      ::std::string& v =
        o.tests_version_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.tests_version_value,
        i.tests_version_size,
        i.tests_version_null);
    }

    // compact_tests_
    //
    {
      ::std::string& v =
        o.compact_tests_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.compact_tests_value,
        i.compact_tests_size,
        i.compact_tests_null);
    }

    // complete_tests_
    //
    {
      ::std::string& v =
        o.complete_tests_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.complete_tests_value,
        i.complete_tests_size,
        i.complete_tests_null);
    }
  }

  void access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::persist_statement[] =
  "INSERT INTO \"Problem\" "
  "(\"id\", "
  "\"title\", "
  "\"difficulty\", "
  "\"problem_statement\", "
  "\"problem_statement_type\", "
  "\"tests_type\", "
  "\"tests_version\", "
  "\"compact_tests\", "
  "\"complete_tests\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7, $8) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::find_statement[] =
  "SELECT "
  "\"Problem\".\"id\", "
  "\"Problem\".\"title\", "
  "\"Problem\".\"difficulty\", "
  "\"Problem\".\"problem_statement\", "
  "\"Problem\".\"problem_statement_type\", "
  "\"Problem\".\"tests_type\", "
  "\"Problem\".\"tests_version\", "
  "\"Problem\".\"compact_tests\", "
  "\"Problem\".\"complete_tests\" "
  "FROM \"Problem\" "
  "WHERE \"Problem\".\"id\"=$1";

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::update_statement[] =
  "UPDATE \"Problem\" "
  "SET "
  "\"title\"=$1, "
  "\"difficulty\"=$2, "
  "\"problem_statement\"=$3, "
  "\"problem_statement_type\"=$4, "
  "\"tests_type\"=$5, "
  "\"tests_version\"=$6, "
  "\"compact_tests\"=$7, "
  "\"complete_tests\"=$8 "
  "WHERE \"id\"=$9";

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::erase_statement[] =
  "DELETE FROM \"Problem\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::query_statement[] =
  "SELECT "
  "\"Problem\".\"id\", "
  "\"Problem\".\"title\", "
  "\"Problem\".\"difficulty\", "
  "\"Problem\".\"problem_statement\", "
  "\"Problem\".\"problem_statement_type\", "
  "\"Problem\".\"tests_type\", "
  "\"Problem\".\"tests_version\", "
  "\"Problem\".\"compact_tests\", "
  "\"Problem\".\"complete_tests\" "
  "FROM \"Problem\"";

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"Problem\"";

  const char access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::table_name[] =
  "\"Problem\"";

  void access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::pointer_type
  access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::object_type >
  access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  query (database& db, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::mokla::model::Problem, id_pgsql >::
  erase_query (database& db, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // User
  //

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  persist_statement_name[] = "persist_mokla_model_User";

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  find_statement_name[] = "find_mokla_model_User";

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  update_statement_name[] = "update_mokla_model_User";

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  erase_statement_name[] = "erase_mokla_model_User";

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  query_statement_name[] = "query_mokla_model_User";

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  erase_query_statement_name[] = "erase_query_mokla_model_User";

  const unsigned int access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::mokla::model::User, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::mokla::model::User, id_pgsql >::id_type
  access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::mokla::model::User, id_pgsql >::id_type
  access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // username_
    //
    if (t[1UL])
    {
      i.username_value.capacity (i.username_size);
      grew = true;
    }

    // first_name_
    //
    if (t[2UL])
    {
      i.first_name_value.capacity (i.first_name_size);
      grew = true;
    }

    // last_name_
    //
    if (t[3UL])
    {
      i.last_name_value.capacity (i.last_name_size);
      grew = true;
    }

    // email_
    //
    if (t[4UL])
    {
      i.email_value.capacity (i.email_size);
      grew = true;
    }

    // phone_
    //
    if (t[5UL])
    {
      i.phone_value.capacity (i.phone_size);
      grew = true;
    }

    // grade_
    //
    if (t[6UL])
    {
      i.grade_value.capacity (i.grade_size);
      grew = true;
    }

    // school_
    //
    if (t[7UL])
    {
      i.school_value.capacity (i.school_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // username_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.username_value.data_ptr ();
    b[n].capacity = i.username_value.capacity ();
    b[n].size = &i.username_size;
    b[n].is_null = &i.username_null;
    n++;

    // first_name_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.first_name_value.data_ptr ();
    b[n].capacity = i.first_name_value.capacity ();
    b[n].size = &i.first_name_size;
    b[n].is_null = &i.first_name_null;
    n++;

    // last_name_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.last_name_value.data_ptr ();
    b[n].capacity = i.last_name_value.capacity ();
    b[n].size = &i.last_name_size;
    b[n].is_null = &i.last_name_null;
    n++;

    // email_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.email_value.data_ptr ();
    b[n].capacity = i.email_value.capacity ();
    b[n].size = &i.email_size;
    b[n].is_null = &i.email_null;
    n++;

    // phone_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.phone_value.data_ptr ();
    b[n].capacity = i.phone_value.capacity ();
    b[n].size = &i.phone_size;
    b[n].is_null = &i.phone_null;
    n++;

    // grade_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.grade_value.data_ptr ();
    b[n].capacity = i.grade_value.capacity ();
    b[n].size = &i.grade_size;
    b[n].is_null = &i.grade_null;
    n++;

    // school_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.school_value.data_ptr ();
    b[n].capacity = i.school_value.capacity ();
    b[n].size = &i.school_size;
    b[n].is_null = &i.school_null;
    n++;
  }

  void access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // username_
    //
    {
      ::std::string const& v =
        o.username_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.username_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.username_value,
        size,
        is_null,
        v);
      i.username_null = is_null;
      i.username_size = size;
      grew = grew || (cap != i.username_value.capacity ());
    }

    // first_name_
    //
    {
      ::std::string const& v =
        o.first_name_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.first_name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.first_name_value,
        size,
        is_null,
        v);
      i.first_name_null = is_null;
      i.first_name_size = size;
      grew = grew || (cap != i.first_name_value.capacity ());
    }

    // last_name_
    //
    {
      ::std::string const& v =
        o.last_name_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.last_name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.last_name_value,
        size,
        is_null,
        v);
      i.last_name_null = is_null;
      i.last_name_size = size;
      grew = grew || (cap != i.last_name_value.capacity ());
    }

    // email_
    //
    {
      ::std::string const& v =
        o.email_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.email_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.email_value,
        size,
        is_null,
        v);
      i.email_null = is_null;
      i.email_size = size;
      grew = grew || (cap != i.email_value.capacity ());
    }

    // phone_
    //
    {
      ::std::string const& v =
        o.phone_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.phone_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.phone_value,
        size,
        is_null,
        v);
      i.phone_null = is_null;
      i.phone_size = size;
      grew = grew || (cap != i.phone_value.capacity ());
    }

    // grade_
    //
    {
      ::std::string const& v =
        o.grade_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.grade_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.grade_value,
        size,
        is_null,
        v);
      i.grade_null = is_null;
      i.grade_size = size;
      grew = grew || (cap != i.grade_value.capacity ());
    }

    // school_
    //
    {
      ::std::string const& v =
        o.school_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.school_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.school_value,
        size,
        is_null,
        v);
      i.school_null = is_null;
      i.school_size = size;
      grew = grew || (cap != i.school_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long long int& v =
        o.id_;

      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // username_
    //
    {
      ::std::string& v =
        o.username_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.username_value,
        i.username_size,
        i.username_null);
    }

    // first_name_
    //
    {
      ::std::string& v =
        o.first_name_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.first_name_value,
        i.first_name_size,
        i.first_name_null);
    }

    // last_name_
    //
    {
      ::std::string& v =
        o.last_name_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.last_name_value,
        i.last_name_size,
        i.last_name_null);
    }

    // email_
    //
    {
      ::std::string& v =
        o.email_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.email_value,
        i.email_size,
        i.email_null);
    }

    // phone_
    //
    {
      ::std::string& v =
        o.phone_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.phone_value,
        i.phone_size,
        i.phone_null);
    }

    // grade_
    //
    {
      ::std::string& v =
        o.grade_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.grade_value,
        i.grade_size,
        i.grade_null);
    }

    // school_
    //
    {
      ::std::string& v =
        o.school_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.school_value,
        i.school_size,
        i.school_null);
    }
  }

  void access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::persist_statement[] =
  "INSERT INTO \"User\" "
  "(\"id\", "
  "\"username\", "
  "\"first_name\", "
  "\"last_name\", "
  "\"email\", "
  "\"phone\", "
  "\"grade\", "
  "\"school\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::find_statement[] =
  "SELECT "
  "\"User\".\"id\", "
  "\"User\".\"username\", "
  "\"User\".\"first_name\", "
  "\"User\".\"last_name\", "
  "\"User\".\"email\", "
  "\"User\".\"phone\", "
  "\"User\".\"grade\", "
  "\"User\".\"school\" "
  "FROM \"User\" "
  "WHERE \"User\".\"id\"=$1";

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::update_statement[] =
  "UPDATE \"User\" "
  "SET "
  "\"username\"=$1, "
  "\"first_name\"=$2, "
  "\"last_name\"=$3, "
  "\"email\"=$4, "
  "\"phone\"=$5, "
  "\"grade\"=$6, "
  "\"school\"=$7 "
  "WHERE \"id\"=$8";

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::erase_statement[] =
  "DELETE FROM \"User\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::query_statement[] =
  "SELECT "
  "\"User\".\"id\", "
  "\"User\".\"username\", "
  "\"User\".\"first_name\", "
  "\"User\".\"last_name\", "
  "\"User\".\"email\", "
  "\"User\".\"phone\", "
  "\"User\".\"grade\", "
  "\"User\".\"school\" "
  "FROM \"User\"";

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"User\"";

  const char access::object_traits_impl< ::mokla::model::User, id_pgsql >::table_name[] =
  "\"User\"";

  void access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::mokla::model::User, id_pgsql >::pointer_type
  access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::mokla::model::User, id_pgsql >::object_type >
  access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  query (database& db, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::mokla::model::User, id_pgsql >::
  erase_query (database& db, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // StarterProgram
  //

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  persist_statement_name[] = "persist_mokla_model_StarterProgram";

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  find_statement_name[] = "find_mokla_model_StarterProgram";

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  update_statement_name[] = "update_mokla_model_StarterProgram";

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  erase_statement_name[] = "erase_mokla_model_StarterProgram";

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  query_statement_name[] = "query_mokla_model_StarterProgram";

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  erase_query_statement_name[] = "erase_query_mokla_model_StarterProgram";

  const unsigned int access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::mokla::model::Problem,
    id_pgsql,
    access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::problem_tag>::
  table_name[] = "\"problem\"";

  struct access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::id_type
  access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::id_type
  access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // language_code_
    //
    t[1UL] = 0;

    // program_
    //
    if (t[2UL])
    {
      i.program_value.capacity (i.program_size);
      grew = true;
    }

    // problem_
    //
    t[3UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // language_code_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.language_code_value;
    b[n].is_null = &i.language_code_null;
    n++;

    // program_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.program_value.data_ptr ();
    b[n].capacity = i.program_value.capacity ();
    b[n].size = &i.program_size;
    b[n].is_null = &i.program_null;
    n++;

    // problem_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.problem_value;
    b[n].is_null = &i.problem_null;
    n++;
  }

  void access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // language_code_
    //
    {
      ::mokla::model::ELanguage_code const& v =
        o.language_code_;

      bool is_null (false);
      pgsql::value_traits<
          ::mokla::model::ELanguage_code,
          pgsql::id_integer >::set_image (
        i.language_code_value, is_null, v);
      i.language_code_null = is_null;
    }

    // program_
    //
    {
      ::std::string const& v =
        o.program_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.program_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.program_value,
        size,
        is_null,
        v);
      i.program_null = is_null;
      i.program_size = size;
      grew = grew || (cap != i.program_value.capacity ());
    }

    // problem_
    //
    {
      ::std::shared_ptr< ::mokla::model::Problem > const& v =
        o.problem_;

      typedef object_traits< ::mokla::model::Problem > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::mokla::model::Problem > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& ptr_id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.problem_value, is_null, ptr_id);
        i.problem_null = is_null;
      }
      else
        throw null_pointer ();
    }

    return grew;
  }

  void access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long long int& v =
        o.id_;

      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // language_code_
    //
    {
      ::mokla::model::ELanguage_code& v =
        o.language_code_;

      pgsql::value_traits<
          ::mokla::model::ELanguage_code,
          pgsql::id_integer >::set_value (
        v,
        i.language_code_value,
        i.language_code_null);
    }

    // program_
    //
    {
      ::std::string& v =
        o.program_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.program_value,
        i.program_size,
        i.program_null);
    }

    // problem_
    //
    {
      ::std::shared_ptr< ::mokla::model::Problem >& v =
        o.problem_;

      typedef object_traits< ::mokla::model::Problem > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::mokla::model::Problem > > ptr_traits;

      if (i.problem_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type ptr_id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          ptr_id,
          i.problem_value,
          i.problem_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (ptr_id));
      }
    }
  }

  void access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::persist_statement[] =
  "INSERT INTO \"StarterProgram\" "
  "(\"id\", "
  "\"language_code\", "
  "\"program\", "
  "\"problem\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::find_statement[] =
  "SELECT "
  "\"StarterProgram\".\"id\", "
  "\"StarterProgram\".\"language_code\", "
  "\"StarterProgram\".\"program\", "
  "\"StarterProgram\".\"problem\" "
  "FROM \"StarterProgram\" "
  "WHERE \"StarterProgram\".\"id\"=$1";

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::update_statement[] =
  "UPDATE \"StarterProgram\" "
  "SET "
  "\"language_code\"=$1, "
  "\"program\"=$2, "
  "\"problem\"=$3 "
  "WHERE \"id\"=$4";

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::erase_statement[] =
  "DELETE FROM \"StarterProgram\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"StarterProgram\".\"id\",\n"
  "\"StarterProgram\".\"language_code\",\n"
  "\"StarterProgram\".\"program\",\n"
  "\"StarterProgram\".\"problem\"\n"
  "FROM \"StarterProgram\"\n"
  "LEFT JOIN \"Problem\" AS \"problem\" ON \"problem\".\"id\"=\"StarterProgram\".\"problem\"";

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"StarterProgram\"";

  const char access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::table_name[] =
  "\"StarterProgram\"";

  void access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::pointer_type
  access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::object_type >
  access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  query (database& db, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::
  erase_query (database& db, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // Submission
  //

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  persist_statement_name[] = "persist_mokla_model_Submission";

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  find_statement_name[] = "find_mokla_model_Submission";

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  update_statement_name[] = "update_mokla_model_Submission";

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  erase_statement_name[] = "erase_mokla_model_Submission";

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  query_statement_name[] = "query_mokla_model_Submission";

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  erase_query_statement_name[] = "erase_query_mokla_model_Submission";

  const unsigned int access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::bool_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::bool_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::mokla::model::Language,
    id_pgsql,
    access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::language_tag>::
  table_name[] = "\"language\"";

  const char alias_traits<  ::mokla::model::User,
    id_pgsql,
    access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::user_tag>::
  table_name[] = "\"user\"";

  const char alias_traits<  ::mokla::model::Problem,
    id_pgsql,
    access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::problem_tag>::
  table_name[] = "\"problem\"";

  struct access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::id_type
  access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::id_type
  access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // source_code_
    //
    if (t[1UL])
    {
      i.source_code_value.capacity (i.source_code_size);
      grew = true;
    }

    // language_
    //
    t[2UL] = 0;

    // is_compact_run_
    //
    t[3UL] = 0;

    // tests_type_
    //
    t[4UL] = 0;

    // tests_version_
    //
    if (t[5UL])
    {
      i.tests_version_value.capacity (i.tests_version_size);
      grew = true;
    }

    // user_
    //
    t[6UL] = 0;

    // problem_
    //
    t[7UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // source_code_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.source_code_value.data_ptr ();
    b[n].capacity = i.source_code_value.capacity ();
    b[n].size = &i.source_code_size;
    b[n].is_null = &i.source_code_null;
    n++;

    // language_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.language_value;
    b[n].is_null = &i.language_null;
    n++;

    // is_compact_run_
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.is_compact_run_value;
    b[n].is_null = &i.is_compact_run_null;
    n++;

    // tests_type_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.tests_type_value;
    b[n].is_null = &i.tests_type_null;
    n++;

    // tests_version_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.tests_version_value.data_ptr ();
    b[n].capacity = i.tests_version_value.capacity ();
    b[n].size = &i.tests_version_size;
    b[n].is_null = &i.tests_version_null;
    n++;

    // user_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.user_value;
    b[n].is_null = &i.user_null;
    n++;

    // problem_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.problem_value;
    b[n].is_null = &i.problem_null;
    n++;
  }

  void access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // source_code_
    //
    {
      ::std::string const& v =
        o.source_code_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.source_code_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.source_code_value,
        size,
        is_null,
        v);
      i.source_code_null = is_null;
      i.source_code_size = size;
      grew = grew || (cap != i.source_code_value.capacity ());
    }

    // language_
    //
    {
      ::std::shared_ptr< ::mokla::model::Language > const& v =
        o.language_;

      typedef object_traits< ::mokla::model::Language > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::mokla::model::Language > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& ptr_id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.language_value, is_null, ptr_id);
        i.language_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // is_compact_run_
    //
    {
      bool const& v =
        o.is_compact_run_;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.is_compact_run_value, is_null, v);
      i.is_compact_run_null = is_null;
    }

    // tests_type_
    //
    {
      ::mokla::model::ETestsType const& v =
        o.tests_type_;

      bool is_null (false);
      pgsql::value_traits<
          ::mokla::model::ETestsType,
          pgsql::id_integer >::set_image (
        i.tests_type_value, is_null, v);
      i.tests_type_null = is_null;
    }

    // tests_version_
    //
    {
      ::std::string const& v =
        o.tests_version_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.tests_version_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.tests_version_value,
        size,
        is_null,
        v);
      i.tests_version_null = is_null;
      i.tests_version_size = size;
      grew = grew || (cap != i.tests_version_value.capacity ());
    }

    // user_
    //
    {
      ::std::shared_ptr< ::mokla::model::User > const& v =
        o.user_;

      typedef object_traits< ::mokla::model::User > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::mokla::model::User > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& ptr_id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.user_value, is_null, ptr_id);
        i.user_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // problem_
    //
    {
      ::std::shared_ptr< ::mokla::model::Problem > const& v =
        o.problem_;

      typedef object_traits< ::mokla::model::Problem > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::mokla::model::Problem > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& ptr_id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.problem_value, is_null, ptr_id);
        i.problem_null = is_null;
      }
      else
        throw null_pointer ();
    }

    return grew;
  }

  void access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long long int& v =
        o.id_;

      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // source_code_
    //
    {
      ::std::string& v =
        o.source_code_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.source_code_value,
        i.source_code_size,
        i.source_code_null);
    }

    // language_
    //
    {
      ::std::shared_ptr< ::mokla::model::Language >& v =
        o.language_;

      typedef object_traits< ::mokla::model::Language > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::mokla::model::Language > > ptr_traits;

      if (i.language_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type ptr_id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          ptr_id,
          i.language_value,
          i.language_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (ptr_id));
      }
    }

    // is_compact_run_
    //
    {
      bool& v =
        o.is_compact_run_;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.is_compact_run_value,
        i.is_compact_run_null);
    }

    // tests_type_
    //
    {
      ::mokla::model::ETestsType& v =
        o.tests_type_;

      pgsql::value_traits<
          ::mokla::model::ETestsType,
          pgsql::id_integer >::set_value (
        v,
        i.tests_type_value,
        i.tests_type_null);
    }

    // tests_version_
    //
    {
      ::std::string& v =
        o.tests_version_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.tests_version_value,
        i.tests_version_size,
        i.tests_version_null);
    }

    // user_
    //
    {
      ::std::shared_ptr< ::mokla::model::User >& v =
        o.user_;

      typedef object_traits< ::mokla::model::User > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::mokla::model::User > > ptr_traits;

      if (i.user_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type ptr_id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          ptr_id,
          i.user_value,
          i.user_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (ptr_id));
      }
    }

    // problem_
    //
    {
      ::std::shared_ptr< ::mokla::model::Problem >& v =
        o.problem_;

      typedef object_traits< ::mokla::model::Problem > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::mokla::model::Problem > > ptr_traits;

      if (i.problem_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type ptr_id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          ptr_id,
          i.problem_value,
          i.problem_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (ptr_id));
      }
    }
  }

  void access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long long int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::persist_statement[] =
  "INSERT INTO \"Submission\" "
  "(\"id\", "
  "\"source_code\", "
  "\"language\", "
  "\"is_compact_run\", "
  "\"tests_type\", "
  "\"tests_version\", "
  "\"user\", "
  "\"problem\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::find_statement[] =
  "SELECT "
  "\"Submission\".\"id\", "
  "\"Submission\".\"source_code\", "
  "\"Submission\".\"language\", "
  "\"Submission\".\"is_compact_run\", "
  "\"Submission\".\"tests_type\", "
  "\"Submission\".\"tests_version\", "
  "\"Submission\".\"user\", "
  "\"Submission\".\"problem\" "
  "FROM \"Submission\" "
  "WHERE \"Submission\".\"id\"=$1";

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::update_statement[] =
  "UPDATE \"Submission\" "
  "SET "
  "\"source_code\"=$1, "
  "\"language\"=$2, "
  "\"is_compact_run\"=$3, "
  "\"tests_type\"=$4, "
  "\"tests_version\"=$5, "
  "\"user\"=$6, "
  "\"problem\"=$7 "
  "WHERE \"id\"=$8";

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::erase_statement[] =
  "DELETE FROM \"Submission\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"Submission\".\"id\",\n"
  "\"Submission\".\"source_code\",\n"
  "\"Submission\".\"language\",\n"
  "\"Submission\".\"is_compact_run\",\n"
  "\"Submission\".\"tests_type\",\n"
  "\"Submission\".\"tests_version\",\n"
  "\"Submission\".\"user\",\n"
  "\"Submission\".\"problem\"\n"
  "FROM \"Submission\"\n"
  "LEFT JOIN \"Language\" AS \"language\" ON \"language\".\"id\"=\"Submission\".\"language\"\n"
  "LEFT JOIN \"User\" AS \"user\" ON \"user\".\"id\"=\"Submission\".\"user\"\n"
  "LEFT JOIN \"Problem\" AS \"problem\" ON \"problem\".\"id\"=\"Submission\".\"problem\"";

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"Submission\"";

  const char access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::table_name[] =
  "\"Submission\"";

  void access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::pointer_type
  access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::object_type >
  access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  query (database& db, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::
  erase_query (database& db, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection (db));

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
