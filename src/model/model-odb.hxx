// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef MODEL_ODB_HXX
#define MODEL_ODB_HXX

#include <odb/version.hxx>

#if ODB_VERSION != 20500UL
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "model.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Language
  //
  template <>
  struct class_traits< ::mokla::model::Language >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mokla::model::Language >
  {
    public:
    typedef ::mokla::model::Language object_type;
    typedef ::mokla::model::Language* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Problem
  //
  template <>
  struct class_traits< ::mokla::model::Problem >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mokla::model::Problem >
  {
    public:
    typedef ::mokla::model::Problem object_type;
    typedef ::mokla::model::Problem* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // User
  //
  template <>
  struct class_traits< ::mokla::model::User >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mokla::model::User >
  {
    public:
    typedef ::mokla::model::User object_type;
    typedef ::mokla::model::User* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // StarterProgram
  //
  template <>
  struct class_traits< ::mokla::model::StarterProgram >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mokla::model::StarterProgram >
  {
    public:
    typedef ::mokla::model::StarterProgram object_type;
    typedef ::mokla::model::StarterProgram* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Submission
  //
  template <>
  struct class_traits< ::mokla::model::Submission >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mokla::model::Submission >
  {
    public:
    typedef ::mokla::model::Submission object_type;
    typedef ::mokla::model::Submission* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // Language
  //
  template <typename A>
  struct query_columns< ::mokla::model::Language, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;

    // is_archived
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        bool,
        pgsql::id_boolean >::query_type,
      pgsql::id_boolean >
    is_archived_type_;

    static const is_archived_type_ is_archived;

    // language_code
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::mokla::model::ELanguage_code,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    language_code_type_;

    static const language_code_type_ language_code;
  };

  template <typename A>
  const typename query_columns< ::mokla::model::Language, id_pgsql, A >::id_type_
  query_columns< ::mokla::model::Language, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Language, id_pgsql, A >::name_type_
  query_columns< ::mokla::model::Language, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Language, id_pgsql, A >::is_archived_type_
  query_columns< ::mokla::model::Language, id_pgsql, A >::
  is_archived (A::table_name, "\"is_archived\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Language, id_pgsql, A >::language_code_type_
  query_columns< ::mokla::model::Language, id_pgsql, A >::
  language_code (A::table_name, "\"language_code\"", 0);

  template <typename A>
  struct pointer_query_columns< ::mokla::model::Language, id_pgsql, A >:
    query_columns< ::mokla::model::Language, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::mokla::model::Language, id_pgsql >:
    public access::object_traits< ::mokla::model::Language >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // is_archived_
      //
      bool is_archived_value;
      bool is_archived_null;

      // language_code_
      //
      int language_code_value;
      bool language_code_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mokla::model::Language, id_common >:
    public access::object_traits_impl< ::mokla::model::Language, id_pgsql >
  {
  };

  // Problem
  //
  template <typename A>
  struct query_columns< ::mokla::model::Problem, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // title
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    title_type_;

    static const title_type_ title;

    // difficulty
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::mokla::model::EDifficulty,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    difficulty_type_;

    static const difficulty_type_ difficulty;

    // problem_statement
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    problem_statement_type_;

    static const problem_statement_type_ problem_statement;

    // problem_statement_type
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::mokla::model::EProblemStatementType,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    problem_statement_type_type_;

    static const problem_statement_type_type_ problem_statement_type;

    // tests_type
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::mokla::model::ETestsType,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    tests_type_type_;

    static const tests_type_type_ tests_type;

    // tests_version
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    tests_version_type_;

    static const tests_version_type_ tests_version;

    // compact_tests
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    compact_tests_type_;

    static const compact_tests_type_ compact_tests;

    // complete_tests
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    complete_tests_type_;

    static const complete_tests_type_ complete_tests;
  };

  template <typename A>
  const typename query_columns< ::mokla::model::Problem, id_pgsql, A >::id_type_
  query_columns< ::mokla::model::Problem, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Problem, id_pgsql, A >::title_type_
  query_columns< ::mokla::model::Problem, id_pgsql, A >::
  title (A::table_name, "\"title\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Problem, id_pgsql, A >::difficulty_type_
  query_columns< ::mokla::model::Problem, id_pgsql, A >::
  difficulty (A::table_name, "\"difficulty\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Problem, id_pgsql, A >::problem_statement_type_
  query_columns< ::mokla::model::Problem, id_pgsql, A >::
  problem_statement (A::table_name, "\"problem_statement\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Problem, id_pgsql, A >::problem_statement_type_type_
  query_columns< ::mokla::model::Problem, id_pgsql, A >::
  problem_statement_type (A::table_name, "\"problem_statement_type\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Problem, id_pgsql, A >::tests_type_type_
  query_columns< ::mokla::model::Problem, id_pgsql, A >::
  tests_type (A::table_name, "\"tests_type\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Problem, id_pgsql, A >::tests_version_type_
  query_columns< ::mokla::model::Problem, id_pgsql, A >::
  tests_version (A::table_name, "\"tests_version\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Problem, id_pgsql, A >::compact_tests_type_
  query_columns< ::mokla::model::Problem, id_pgsql, A >::
  compact_tests (A::table_name, "\"compact_tests\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Problem, id_pgsql, A >::complete_tests_type_
  query_columns< ::mokla::model::Problem, id_pgsql, A >::
  complete_tests (A::table_name, "\"complete_tests\"", 0);

  template <typename A>
  struct pointer_query_columns< ::mokla::model::Problem, id_pgsql, A >:
    query_columns< ::mokla::model::Problem, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::mokla::model::Problem, id_pgsql >:
    public access::object_traits< ::mokla::model::Problem >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // title_
      //
      details::buffer title_value;
      std::size_t title_size;
      bool title_null;

      // difficulty_
      //
      int difficulty_value;
      bool difficulty_null;

      // problem_statement_
      //
      details::buffer problem_statement_value;
      std::size_t problem_statement_size;
      bool problem_statement_null;

      // problem_statement_type_
      //
      int problem_statement_type_value;
      bool problem_statement_type_null;

      // tests_type_
      //
      int tests_type_value;
      bool tests_type_null;

      // tests_version_
      //
      details::buffer tests_version_value;
      std::size_t tests_version_size;
      bool tests_version_null;

      // compact_tests_
      //
      details::buffer compact_tests_value;
      std::size_t compact_tests_size;
      bool compact_tests_null;

      // complete_tests_
      //
      details::buffer complete_tests_value;
      std::size_t complete_tests_size;
      bool complete_tests_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mokla::model::Problem, id_common >:
    public access::object_traits_impl< ::mokla::model::Problem, id_pgsql >
  {
  };

  // User
  //
  template <typename A>
  struct query_columns< ::mokla::model::User, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // username
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    username_type_;

    static const username_type_ username;

    // first_name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    first_name_type_;

    static const first_name_type_ first_name;

    // last_name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    last_name_type_;

    static const last_name_type_ last_name;

    // email
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    email_type_;

    static const email_type_ email;

    // phone
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    phone_type_;

    static const phone_type_ phone;

    // grade
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    grade_type_;

    static const grade_type_ grade;

    // school
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    school_type_;

    static const school_type_ school;
  };

  template <typename A>
  const typename query_columns< ::mokla::model::User, id_pgsql, A >::id_type_
  query_columns< ::mokla::model::User, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::User, id_pgsql, A >::username_type_
  query_columns< ::mokla::model::User, id_pgsql, A >::
  username (A::table_name, "\"username\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::User, id_pgsql, A >::first_name_type_
  query_columns< ::mokla::model::User, id_pgsql, A >::
  first_name (A::table_name, "\"first_name\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::User, id_pgsql, A >::last_name_type_
  query_columns< ::mokla::model::User, id_pgsql, A >::
  last_name (A::table_name, "\"last_name\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::User, id_pgsql, A >::email_type_
  query_columns< ::mokla::model::User, id_pgsql, A >::
  email (A::table_name, "\"email\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::User, id_pgsql, A >::phone_type_
  query_columns< ::mokla::model::User, id_pgsql, A >::
  phone (A::table_name, "\"phone\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::User, id_pgsql, A >::grade_type_
  query_columns< ::mokla::model::User, id_pgsql, A >::
  grade (A::table_name, "\"grade\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::User, id_pgsql, A >::school_type_
  query_columns< ::mokla::model::User, id_pgsql, A >::
  school (A::table_name, "\"school\"", 0);

  template <typename A>
  struct pointer_query_columns< ::mokla::model::User, id_pgsql, A >:
    query_columns< ::mokla::model::User, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::mokla::model::User, id_pgsql >:
    public access::object_traits< ::mokla::model::User >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // username_
      //
      details::buffer username_value;
      std::size_t username_size;
      bool username_null;

      // first_name_
      //
      details::buffer first_name_value;
      std::size_t first_name_size;
      bool first_name_null;

      // last_name_
      //
      details::buffer last_name_value;
      std::size_t last_name_size;
      bool last_name_null;

      // email_
      //
      details::buffer email_value;
      std::size_t email_size;
      bool email_null;

      // phone_
      //
      details::buffer phone_value;
      std::size_t phone_size;
      bool phone_null;

      // grade_
      //
      details::buffer grade_value;
      std::size_t grade_size;
      bool grade_null;

      // school_
      //
      details::buffer school_value;
      std::size_t school_size;
      bool school_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mokla::model::User, id_common >:
    public access::object_traits_impl< ::mokla::model::User, id_pgsql >
  {
  };

  // StarterProgram
  //
  template <typename A>
  struct pointer_query_columns< ::mokla::model::StarterProgram, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // language_code
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::mokla::model::ELanguage_code,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    language_code_type_;

    static const language_code_type_ language_code;

    // program
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    program_type_;

    static const program_type_ program;

    // problem
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    problem_type_;

    static const problem_type_ problem;
  };

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::id_type_
  pointer_query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::language_code_type_
  pointer_query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::
  language_code (A::table_name, "\"language_code\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::program_type_
  pointer_query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::
  program (A::table_name, "\"program\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::problem_type_
  pointer_query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::
  problem (A::table_name, "\"problem\"", 0);

  template <>
  class access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >:
    public access::object_traits< ::mokla::model::StarterProgram >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // language_code_
      //
      int language_code_value;
      bool language_code_null;

      // program_
      //
      details::buffer program_value;
      std::size_t program_size;
      bool program_null;

      // problem_
      //
      long long problem_value;
      bool problem_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct problem_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mokla::model::StarterProgram, id_common >:
    public access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >
  {
  };

  // Submission
  //
  template <typename A>
  struct pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // source_code
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    source_code_type_;

    static const source_code_type_ source_code;

    // language
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    language_type_;

    static const language_type_ language;

    // is_compact_run
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        bool,
        pgsql::id_boolean >::query_type,
      pgsql::id_boolean >
    is_compact_run_type_;

    static const is_compact_run_type_ is_compact_run;

    // tests_type
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::mokla::model::ETestsType,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    tests_type_type_;

    static const tests_type_type_ tests_type;

    // tests_version
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    tests_version_type_;

    static const tests_version_type_ tests_version;

    // user
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    user_type_;

    static const user_type_ user;

    // problem
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    problem_type_;

    static const problem_type_ problem;
  };

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::id_type_
  pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::source_code_type_
  pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::
  source_code (A::table_name, "\"source_code\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::language_type_
  pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::
  language (A::table_name, "\"language\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::is_compact_run_type_
  pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::
  is_compact_run (A::table_name, "\"is_compact_run\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::tests_type_type_
  pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::
  tests_type (A::table_name, "\"tests_type\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::tests_version_type_
  pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::
  tests_version (A::table_name, "\"tests_version\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::user_type_
  pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::
  user (A::table_name, "\"user\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::problem_type_
  pointer_query_columns< ::mokla::model::Submission, id_pgsql, A >::
  problem (A::table_name, "\"problem\"", 0);

  template <>
  class access::object_traits_impl< ::mokla::model::Submission, id_pgsql >:
    public access::object_traits< ::mokla::model::Submission >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // source_code_
      //
      details::buffer source_code_value;
      std::size_t source_code_size;
      bool source_code_null;

      // language_
      //
      long long language_value;
      bool language_null;

      // is_compact_run_
      //
      bool is_compact_run_value;
      bool is_compact_run_null;

      // tests_type_
      //
      int tests_type_value;
      bool tests_type_null;

      // tests_version_
      //
      details::buffer tests_version_value;
      std::size_t tests_version_size;
      bool tests_version_null;

      // user_
      //
      long long user_value;
      bool user_null;

      // problem_
      //
      long long problem_value;
      bool problem_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct language_tag;
    struct user_tag;
    struct problem_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mokla::model::Submission, id_common >:
    public access::object_traits_impl< ::mokla::model::Submission, id_pgsql >
  {
  };

  // Language
  //
  // Problem
  //
  // User
  //
  // StarterProgram
  //
  template <>
  struct alias_traits<
    ::mokla::model::Problem,
    id_pgsql,
    access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::problem_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::mokla::model::StarterProgram, id_pgsql >
  {
    // problem
    //
    typedef
    odb::alias_traits<
      ::mokla::model::Problem,
      id_pgsql,
      access::object_traits_impl< ::mokla::model::StarterProgram, id_pgsql >::problem_tag>
    problem_alias_;
  };

  template <typename A>
  struct query_columns< ::mokla::model::StarterProgram, id_pgsql, A >:
    query_columns_base< ::mokla::model::StarterProgram, id_pgsql >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // language_code
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::mokla::model::ELanguage_code,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    language_code_type_;

    static const language_code_type_ language_code;

    // program
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    program_type_;

    static const program_type_ program;

    // problem
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    problem_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::mokla::model::Problem,
        id_pgsql,
        problem_alias_ > >
    problem_pointer_type_;

    struct problem_type_: problem_pointer_type_, problem_column_type_
    {
      problem_type_ (const char* t, const char* c, const char* conv)
        : problem_column_type_ (t, c, conv)
      {
      }
    };

    static const problem_type_ problem;
  };

  template <typename A>
  const typename query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::id_type_
  query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::language_code_type_
  query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::
  language_code (A::table_name, "\"language_code\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::program_type_
  query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::
  program (A::table_name, "\"program\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::problem_type_
  query_columns< ::mokla::model::StarterProgram, id_pgsql, A >::
  problem (A::table_name, "\"problem\"", 0);

  // Submission
  //
  template <>
  struct alias_traits<
    ::mokla::model::Language,
    id_pgsql,
    access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::language_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::mokla::model::User,
    id_pgsql,
    access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::user_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::mokla::model::Problem,
    id_pgsql,
    access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::problem_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::mokla::model::Submission, id_pgsql >
  {
    // language
    //
    typedef
    odb::alias_traits<
      ::mokla::model::Language,
      id_pgsql,
      access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::language_tag>
    language_alias_;

    // user
    //
    typedef
    odb::alias_traits<
      ::mokla::model::User,
      id_pgsql,
      access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::user_tag>
    user_alias_;

    // problem
    //
    typedef
    odb::alias_traits<
      ::mokla::model::Problem,
      id_pgsql,
      access::object_traits_impl< ::mokla::model::Submission, id_pgsql >::problem_tag>
    problem_alias_;
  };

  template <typename A>
  struct query_columns< ::mokla::model::Submission, id_pgsql, A >:
    query_columns_base< ::mokla::model::Submission, id_pgsql >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // source_code
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    source_code_type_;

    static const source_code_type_ source_code;

    // language
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    language_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::mokla::model::Language,
        id_pgsql,
        language_alias_ > >
    language_pointer_type_;

    struct language_type_: language_pointer_type_, language_column_type_
    {
      language_type_ (const char* t, const char* c, const char* conv)
        : language_column_type_ (t, c, conv)
      {
      }
    };

    static const language_type_ language;

    // is_compact_run
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        bool,
        pgsql::id_boolean >::query_type,
      pgsql::id_boolean >
    is_compact_run_type_;

    static const is_compact_run_type_ is_compact_run;

    // tests_type
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::mokla::model::ETestsType,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    tests_type_type_;

    static const tests_type_type_ tests_type;

    // tests_version
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    tests_version_type_;

    static const tests_version_type_ tests_version;

    // user
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    user_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::mokla::model::User,
        id_pgsql,
        user_alias_ > >
    user_pointer_type_;

    struct user_type_: user_pointer_type_, user_column_type_
    {
      user_type_ (const char* t, const char* c, const char* conv)
        : user_column_type_ (t, c, conv)
      {
      }
    };

    static const user_type_ user;

    // problem
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    problem_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::mokla::model::Problem,
        id_pgsql,
        problem_alias_ > >
    problem_pointer_type_;

    struct problem_type_: problem_pointer_type_, problem_column_type_
    {
      problem_type_ (const char* t, const char* c, const char* conv)
        : problem_column_type_ (t, c, conv)
      {
      }
    };

    static const problem_type_ problem;
  };

  template <typename A>
  const typename query_columns< ::mokla::model::Submission, id_pgsql, A >::id_type_
  query_columns< ::mokla::model::Submission, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Submission, id_pgsql, A >::source_code_type_
  query_columns< ::mokla::model::Submission, id_pgsql, A >::
  source_code (A::table_name, "\"source_code\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Submission, id_pgsql, A >::language_type_
  query_columns< ::mokla::model::Submission, id_pgsql, A >::
  language (A::table_name, "\"language\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Submission, id_pgsql, A >::is_compact_run_type_
  query_columns< ::mokla::model::Submission, id_pgsql, A >::
  is_compact_run (A::table_name, "\"is_compact_run\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Submission, id_pgsql, A >::tests_type_type_
  query_columns< ::mokla::model::Submission, id_pgsql, A >::
  tests_type (A::table_name, "\"tests_type\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Submission, id_pgsql, A >::tests_version_type_
  query_columns< ::mokla::model::Submission, id_pgsql, A >::
  tests_version (A::table_name, "\"tests_version\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Submission, id_pgsql, A >::user_type_
  query_columns< ::mokla::model::Submission, id_pgsql, A >::
  user (A::table_name, "\"user\"", 0);

  template <typename A>
  const typename query_columns< ::mokla::model::Submission, id_pgsql, A >::problem_type_
  query_columns< ::mokla::model::Submission, id_pgsql, A >::
  problem (A::table_name, "\"problem\"", 0);
}

#include "model-odb.ixx"

#include <odb/post.hxx>

#endif // MODEL_ODB_HXX
